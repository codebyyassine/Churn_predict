version: '3.8'

x-backend-base: &backend-base
  image: churn-backend:latest
  volumes:
    - .:/app
  depends_on:
    db:
      condition: service_healthy
    redis:
      condition: service_healthy

services:
  migrations:
    <<: *backend-base
    container_name: churn_migrations
    build:
      context: .
      dockerfile: dockerfile
    command: sh -c "python manage.py makemigrations && python manage.py migrate"

  createadmin:
    <<: *backend-base
    container_name: churn_createadmin
    command: sh -c "echo \"from django.contrib.auth import get_user_model; User = get_user_model(); User.objects.create_superuser('root', 'admin@example.com', 'root') if not User.objects.filter(username='root').exists() else None\" | python manage.py shell"
    depends_on:
      migrations:
        condition: service_completed_successfully
      db:
        condition: service_healthy

  frontend:
    build:
      context: ./churn-prediction-frontend
      dockerfile: Dockerfile
    container_name: churn_frontend
    ports:
      - "3000:3000"
    depends_on:
      web:
        condition: service_healthy
      createadmin:
        condition: service_completed_successfully
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000

  web:
    <<: *backend-base
    container_name: churn_web
    command: python manage.py runserver 0.0.0.0:8000
    ports:
      - "8000:8000"
    healthcheck:
      test: ["CMD", "curl", "-fL", "http://web:8000/admin/"]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      createadmin:
        condition: service_completed_successfully
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

  celery:
    <<: *backend-base
    container_name: churn_celery
    command: celery -A churn_project worker -l info --pool=solo
    depends_on:
      createadmin:
        condition: service_completed_successfully
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    

  celery_beat:
    <<: *backend-base
    container_name: churn_celery_beat
    command: celery -A churn_project beat -l info
    depends_on:
      createadmin:
        condition: service_completed_successfully
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

  db:
    image: postgres:latest
    container_name: churn_db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: churn_db
    ports:
      - "5439:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d churn_db"]
      interval: 5s
      timeout: 5s
      retries: 10

  redis:
    image: redis:latest
    container_name: churn_redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
